# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: BulletBox CI CD

on:
  push:
    branches: [ "develop" ]

# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: bulletbox-github-actions-s3-bucket
  CODE_DEPLOY_APPLICATION_NAME: my-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: my-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  BulletBox-ci-cd:

    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # jwt secret 로딩 및 security 파일 생성
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application-security.properties
      - run: echo "${{ secrets.SECURITY_SECRET }}" > ./src/main/resources/application-security.properties

      # db 정보 로딩 및 application-dev 파일 생성
      - run: touch ./src/main/resources/application-dev.properties
      - run: echo "${{ secrets.DB }}" > ./src/main/resources/application-dev.properties

      # 이메일 인증에 필요한 파일 생성
      - run: touch ./src/main/resources/mail-security.properties
      - run: echo "${{ secrets.MAIL }}" > ./src/main/resources/mail-security.properties

      # OAuth 필요한 파일 생성
      - run: touch ./src/main/resources/application-security.oauth.properties
      - run: echo "${{ secrets.OAUTH }}" > ./src/main/resources/application-security.oauth.properties

        # Gradle 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # Gradle 권한 설정
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # Gradle로 Build (test 제외)
      - name: Build with Gradle
        uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
        with:
          arguments: clean build -x test

      # 임시 저장
      - name: Temporarily save build artifact
        uses: actions/upload-artifact@v2
        with:
          name: build-artifact
          path: build
          retention-days: 1

      # AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # (5) 빌드 결과물을 S3 버킷에 업로드
      - name: Upload to AWS S3
        run: |
          aws deploy push \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --ignore-hidden-files \
            --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
            --source .

      # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
      - name: Deploy to AWS EC2 from S3
        run: |
          aws deploy create-deployment \
            --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
            --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip

  build-docker-image:
    needs: build
    name: Deploy Docker Image
    runs-on: ubuntu-20.04
    steps:
      # 임시 저장 결과 로딩
      - uses: actions/checkout@v2
      - name: Retrieve built
        uses: actions/download-artifact@v2
        with:
          name: build-artifact
          path: build

      # 도커 허브 로그인
      - name: Docker Hub Login
        run: docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}

      # 도커 이미지 빌드
      - name: Building Docker Image
        run: docker build --build-arg JAR_FILE=build/libs/\*.jar -t ${{ secrets.DOCKERHUB_USERNAME }}/bulletbox:web .

      # 도커 이미지 푸시
      - name: Publish Docker Image
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/bulletbox:web

  docker-deploy:
    name: deploy
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@master

      # docker-compose 파일 배포
      - name: copy file via ssh password
      - uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          port: 22
          source: "docker-compose.yml"
          target: "/home/ubuntu/"

      # 도커 compose up
      - name: executing remote ssh commands using password
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ubuntu
          key: ${{ secrets.KEY }}
          port: 22
          timeout: 90s # 기본값 30
          script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bulletbox:web
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/bulletbox:redis
            docker-compose up -d --remove-orphans
            docker image prune -f